// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wechat.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"

#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif

#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wechat_2eproto

namespace google {
    namespace protobuf {
        namespace internal {
            class AnyMetadata;
        }  // namespace internal
    }  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_wechat_2eproto {
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
        descriptor_table_wechat_2eproto;
namespace wechat {
    class WechatReply;

    struct WechatReplyDefaultTypeInternal;
    extern WechatReplyDefaultTypeInternal _WechatReply_default_instance_;

    class WechatRequest;

    struct WechatRequestDefaultTypeInternal;
    extern WechatRequestDefaultTypeInternal _WechatRequest_default_instance_;
}  // namespace wechat
namespace google {
    namespace protobuf {
    }  // namespace protobuf
}  // namespace google

namespace wechat {

// ===================================================================


// -------------------------------------------------------------------

    class WechatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:wechat.WechatRequest) */ {
    public:
        inline WechatRequest() : WechatRequest(nullptr) {}

        ~WechatRequest() override;

        template<typename = void>
        explicit PROTOBUF_CONSTEXPR WechatRequest(
                ::google::protobuf::internal::ConstantInitialized);

        inline WechatRequest(const WechatRequest &from) : WechatRequest(nullptr, from) {}

        inline WechatRequest(WechatRequest &&from) noexcept
                : WechatRequest(nullptr, std::move(from)) {}

        inline WechatRequest &operator=(const WechatRequest &from) {
            CopyFrom(from);
            return *this;
        }

        inline WechatRequest &operator=(WechatRequest &&from) noexcept {
            if (this == &from) return *this;
            if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const

        ABSL_ATTRIBUTE_LIFETIME_BOUND {
            return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
                    ::google::protobuf::UnknownFieldSet::default_instance);
        }

        inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields()

        ABSL_ATTRIBUTE_LIFETIME_BOUND {
            return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
        }

        static const ::google::protobuf::Descriptor *descriptor() {
            return GetDescriptor();
        }

        static const ::google::protobuf::Descriptor *GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }

        static const ::google::protobuf::Reflection *GetReflection() {
            return default_instance().GetMetadata().reflection;
        }

        static const WechatRequest &default_instance() {
            return *internal_default_instance();
        }

        static inline const WechatRequest *internal_default_instance() {
            return reinterpret_cast<const WechatRequest *>(
                    &_WechatRequest_default_instance_);
        }

        static constexpr int kIndexInFileMessages = 0;

        friend void swap(WechatRequest &a, WechatRequest &b) { a.Swap(&b); }

        inline void Swap(WechatRequest *other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::google::protobuf::internal::GenericSwap(this, other);
            }
        }

        void UnsafeArenaSwap(WechatRequest *other) {
            if (other == this) return;
            ABSL_DCHECK(GetArena() == other->GetArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        WechatRequest *New(::google::protobuf::Arena *arena = nullptr) const final {
            return ::google::protobuf::Message::DefaultConstruct<WechatRequest>(arena);
        }

        using ::google::protobuf::Message::CopyFrom;

        void CopyFrom(const WechatRequest &from);

        using ::google::protobuf::Message::MergeFrom;

        void MergeFrom(const WechatRequest &from) { WechatRequest::MergeImpl(*this, from); }

    private:
        static void MergeImpl(
                ::google::protobuf::MessageLite &to_msg,
                const ::google::protobuf::MessageLite &from_msg);

    public:
        bool IsInitialized() const {
            return true;
        }

        ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;

        ::size_t ByteSizeLong() const final;

        ::uint8_t *_InternalSerialize(
                ::uint8_t *target,
                ::google::protobuf::io::EpsCopyOutputStream *stream) const final;

        int GetCachedSize() const { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::google::protobuf::Arena *arena);

        void SharedDtor();

        void InternalSwap(WechatRequest *other);

    private:
        friend class ::google::protobuf::internal::AnyMetadata;

        static ::absl::string_view FullMessageName() { return "wechat.WechatRequest"; }

    protected:
        explicit WechatRequest(::google::protobuf::Arena *arena);

        WechatRequest(::google::protobuf::Arena *arena, const WechatRequest &from);

        WechatRequest(::google::protobuf::Arena *arena, WechatRequest &&from) noexcept
                : WechatRequest(arena) {
            *this = ::std::move(from);
        }

        const ::google::protobuf::Message::ClassData *GetClassData() const final;

    public:
        ::google::protobuf::Metadata GetMetadata() const;
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------
        enum : int {
            kUserNameFieldNumber = 1,
            kFriendNameFieldNumber = 2,
        };

        // string user_name = 1;
        void clear_user_name();

        const std::string &user_name() const;

        template<typename Arg_ = const std::string &, typename... Args_>
        void set_user_name(Arg_ &&arg, Args_... args);

        std::string *mutable_user_name();

        PROTOBUF_NODISCARD std::string
        *

        release_user_name();

        void set_allocated_user_name(std::string *value);

    private:
        const std::string &_internal_user_name() const;

        inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
                const std::string &value);

        std::string *_internal_mutable_user_name();

    public:
        // string friend_name = 2;
        void clear_friend_name();

        const std::string &friend_name() const;

        template<typename Arg_ = const std::string &, typename... Args_>
        void set_friend_name(Arg_ &&arg, Args_... args);

        std::string *mutable_friend_name();

        PROTOBUF_NODISCARD std::string
        *

        release_friend_name();

        void set_allocated_friend_name(std::string *value);

    private:
        const std::string &_internal_friend_name() const;

        inline PROTOBUF_ALWAYS_INLINE void _internal_set_friend_name(
                const std::string &value);

        std::string *_internal_mutable_friend_name();

    public:
        // @@protoc_insertion_point(class_scope:wechat.WechatRequest)
    private:
        class _Internal;

        friend class ::google::protobuf::internal::TcParser;

        static const ::google::protobuf::internal::TcParseTable<
                1, 2, 0,
                49, 2>
                _table_;

        static constexpr const void *_raw_default_instance_ =
                &_WechatRequest_default_instance_;

        friend class ::google::protobuf::MessageLite;

        friend class ::google::protobuf::Arena;

        template<typename T>
        friend
        class ::google::protobuf::Arena::InternalHelper;

        using InternalArenaConstructable_ = void;
        using DestructorSkippable_ = void;

        struct Impl_ {
            inline explicit constexpr Impl_(
                    ::google::protobuf::internal::ConstantInitialized) noexcept;

            inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                  ::google::protobuf::Arena *arena);

            inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                  ::google::protobuf::Arena *arena, const Impl_ &from,
                                  const WechatRequest &from_msg);

            ::google::protobuf::internal::ArenaStringPtr user_name_;
            ::google::protobuf::internal::ArenaStringPtr friend_name_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            PROTOBUF_TSAN_DECLARE_MEMBER
        };

        union {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_wechat_2eproto;
    };
// -------------------------------------------------------------------

    class WechatReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:wechat.WechatReply) */ {
    public:
        inline WechatReply() : WechatReply(nullptr) {}

        ~WechatReply() override;

        template<typename = void>
        explicit PROTOBUF_CONSTEXPR WechatReply(
                ::google::protobuf::internal::ConstantInitialized);

        inline WechatReply(const WechatReply &from) : WechatReply(nullptr, from) {}

        inline WechatReply(WechatReply &&from) noexcept
                : WechatReply(nullptr, std::move(from)) {}

        inline WechatReply &operator=(const WechatReply &from) {
            CopyFrom(from);
            return *this;
        }

        inline WechatReply &operator=(WechatReply &&from) noexcept {
            if (this == &from) return *this;
            if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
                    ) {
                InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const

        ABSL_ATTRIBUTE_LIFETIME_BOUND {
            return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
                    ::google::protobuf::UnknownFieldSet::default_instance);
        }

        inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields()

        ABSL_ATTRIBUTE_LIFETIME_BOUND {
            return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
        }

        static const ::google::protobuf::Descriptor *descriptor() {
            return GetDescriptor();
        }

        static const ::google::protobuf::Descriptor *GetDescriptor() {
            return default_instance().GetMetadata().descriptor;
        }

        static const ::google::protobuf::Reflection *GetReflection() {
            return default_instance().GetMetadata().reflection;
        }

        static const WechatReply &default_instance() {
            return *internal_default_instance();
        }

        static inline const WechatReply *internal_default_instance() {
            return reinterpret_cast<const WechatReply *>(
                    &_WechatReply_default_instance_);
        }

        static constexpr int kIndexInFileMessages = 1;

        friend void swap(WechatReply &a, WechatReply &b) { a.Swap(&b); }

        inline void Swap(WechatReply *other) {
            if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            } else {
                ::google::protobuf::internal::GenericSwap(this, other);
            }
        }

        void UnsafeArenaSwap(WechatReply *other) {
            if (other == this) return;
            ABSL_DCHECK(GetArena() == other->GetArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        WechatReply *New(::google::protobuf::Arena *arena = nullptr) const final {
            return ::google::protobuf::Message::DefaultConstruct<WechatReply>(arena);
        }

        using ::google::protobuf::Message::CopyFrom;

        void CopyFrom(const WechatReply &from);

        using ::google::protobuf::Message::MergeFrom;

        void MergeFrom(const WechatReply &from) { WechatReply::MergeImpl(*this, from); }

    private:
        static void MergeImpl(
                ::google::protobuf::MessageLite &to_msg,
                const ::google::protobuf::MessageLite &from_msg);

    public:
        bool IsInitialized() const {
            return true;
        }

        ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;

        ::size_t ByteSizeLong() const final;

        ::uint8_t *_InternalSerialize(
                ::uint8_t *target,
                ::google::protobuf::io::EpsCopyOutputStream *stream) const final;

        int GetCachedSize() const { return _impl_._cached_size_.Get(); }

    private:
        void SharedCtor(::google::protobuf::Arena *arena);

        void SharedDtor();

        void InternalSwap(WechatReply *other);

    private:
        friend class ::google::protobuf::internal::AnyMetadata;

        static ::absl::string_view FullMessageName() { return "wechat.WechatReply"; }

    protected:
        explicit WechatReply(::google::protobuf::Arena *arena);

        WechatReply(::google::protobuf::Arena *arena, const WechatReply &from);

        WechatReply(::google::protobuf::Arena *arena, WechatReply &&from) noexcept
                : WechatReply(arena) {
            *this = ::std::move(from);
        }

        const ::google::protobuf::Message::ClassData *GetClassData() const final;

    public:
        ::google::protobuf::Metadata GetMetadata() const;
        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------
        enum : int {
            kReplyFieldNumber = 1,
        };

        // string reply = 1;
        void clear_reply();

        const std::string &reply() const;

        template<typename Arg_ = const std::string &, typename... Args_>
        void set_reply(Arg_ &&arg, Args_... args);

        std::string *mutable_reply();

        PROTOBUF_NODISCARD std::string
        *

        release_reply();

        void set_allocated_reply(std::string *value);

    private:
        const std::string &_internal_reply() const;

        inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply(
                const std::string &value);

        std::string *_internal_mutable_reply();

    public:
        // @@protoc_insertion_point(class_scope:wechat.WechatReply)
    private:
        class _Internal;

        friend class ::google::protobuf::internal::TcParser;

        static const ::google::protobuf::internal::TcParseTable<
                0, 1, 0,
                32, 2>
                _table_;

        static constexpr const void *_raw_default_instance_ =
                &_WechatReply_default_instance_;

        friend class ::google::protobuf::MessageLite;

        friend class ::google::protobuf::Arena;

        template<typename T>
        friend
        class ::google::protobuf::Arena::InternalHelper;

        using InternalArenaConstructable_ = void;
        using DestructorSkippable_ = void;

        struct Impl_ {
            inline explicit constexpr Impl_(
                    ::google::protobuf::internal::ConstantInitialized) noexcept;

            inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                  ::google::protobuf::Arena *arena);

            inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                                  ::google::protobuf::Arena *arena, const Impl_ &from,
                                  const WechatReply &from_msg);

            ::google::protobuf::internal::ArenaStringPtr reply_;
            mutable ::google::protobuf::internal::CachedSize _cached_size_;
            PROTOBUF_TSAN_DECLARE_MEMBER
        };

        union {
            Impl_ _impl_;
        };
        friend struct ::TableStruct_wechat_2eproto;
    };

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WechatRequest

// string user_name = 1;
    inline void WechatRequest::clear_user_name() {
        ::google::protobuf::internal::TSanWrite(&_impl_);
        _impl_.user_name_.ClearToEmpty();
    }

    inline const std::string &WechatRequest::user_name() const

    ABSL_ATTRIBUTE_LIFETIME_BOUND {
    // @@protoc_insertion_point(field_get:wechat.WechatRequest.user_name)
    return

    _internal_user_name();
}

template<typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatRequest::set_user_name(Arg_ &&arg,
                                                                Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.user_name_.Set(static_cast<Arg_ &&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:wechat.WechatRequest.user_name)
}

inline std::string *WechatRequest::mutable_user_name()

ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string *_s = _internal_mutable_user_name();
// @@protoc_insertion_point(field_mutable:wechat.WechatRequest.user_name)
return
_s;
}

inline const std::string &WechatRequest::_internal_user_name() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.user_name_.Get();
}

inline void WechatRequest::_internal_set_user_name(const std::string &value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.user_name_.Set(value, GetArena());
}

inline std::string *WechatRequest::_internal_mutable_user_name() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.user_name_.Mutable(GetArena());
}

inline std::string *WechatRequest::release_user_name() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:wechat.WechatRequest.user_name)
    return _impl_.user_name_.Release();
}

inline void WechatRequest::set_allocated_user_name(std::string *value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.user_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.user_name_.IsDefault()) {
      _impl_.user_name_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:wechat.WechatRequest.user_name)
}

// string friend_name = 2;
inline void WechatRequest::clear_friend_name() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.friend_name_.ClearToEmpty();
}

inline const std::string &WechatRequest::friend_name() const

ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:wechat.WechatRequest.friend_name)
return

_internal_friend_name();

}

template<typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatRequest::set_friend_name(Arg_ &&arg,
                                                                  Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.friend_name_.Set(static_cast<Arg_ &&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:wechat.WechatRequest.friend_name)
}

inline std::string *WechatRequest::mutable_friend_name()

ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string *_s = _internal_mutable_friend_name();
// @@protoc_insertion_point(field_mutable:wechat.WechatRequest.friend_name)
return
_s;
}

inline const std::string &WechatRequest::_internal_friend_name() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.friend_name_.Get();
}

inline void WechatRequest::_internal_set_friend_name(const std::string &value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.friend_name_.Set(value, GetArena());
}

inline std::string *WechatRequest::_internal_mutable_friend_name() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.friend_name_.Mutable(GetArena());
}

inline std::string *WechatRequest::release_friend_name() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:wechat.WechatRequest.friend_name)
    return _impl_.friend_name_.Release();
}

inline void WechatRequest::set_allocated_friend_name(std::string *value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.friend_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.friend_name_.IsDefault()) {
      _impl_.friend_name_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:wechat.WechatRequest.friend_name)
}

// -------------------------------------------------------------------

// WechatReply

// string reply = 1;
inline void WechatReply::clear_reply() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.reply_.ClearToEmpty();
}

inline const std::string &WechatReply::reply() const

ABSL_ATTRIBUTE_LIFETIME_BOUND {
// @@protoc_insertion_point(field_get:wechat.WechatReply.reply)
return

_internal_reply();

}

template<typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WechatReply::set_reply(Arg_ &&arg,
                                                          Args_... args) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.reply_.Set(static_cast<Arg_ &&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:wechat.WechatReply.reply)
}

inline std::string *WechatReply::mutable_reply()

ABSL_ATTRIBUTE_LIFETIME_BOUND {
std::string *_s = _internal_mutable_reply();
// @@protoc_insertion_point(field_mutable:wechat.WechatReply.reply)
return
_s;
}

inline const std::string &WechatReply::_internal_reply() const {
    ::google::protobuf::internal::TSanRead(&_impl_);
    return _impl_.reply_.Get();
}

inline void WechatReply::_internal_set_reply(const std::string &value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.reply_.Set(value, GetArena());
}

inline std::string *WechatReply::_internal_mutable_reply() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    return _impl_.reply_.Mutable(GetArena());
}

inline std::string *WechatReply::release_reply() {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    // @@protoc_insertion_point(field_release:wechat.WechatReply.reply)
    return _impl_.reply_.Release();
}

inline void WechatReply::set_allocated_reply(std::string *value) {
    ::google::protobuf::internal::TSanWrite(&_impl_);
    _impl_.reply_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.reply_.IsDefault()) {
      _impl_.reply_.Set("", GetArena());
    }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:wechat.WechatReply.reply)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace wechat


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
