// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wechat.proto
#ifndef GRPC_wechat_2eproto__INCLUDED
#define GRPC_wechat_2eproto__INCLUDED

#include "wechat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace wechat {

// 定义服务
    class WechatService final {
    public:
        static constexpr char const *service_full_name() {
            return "wechat.WechatService";
        }

        class StubInterface {
        public:
            virtual ~StubInterface() {}

            virtual ::grpc::Status AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                             ::wechat::WechatReply *response) = 0;

            std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>> AsyncAddFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>>
                (AsyncAddFriendRaw(context, request, cq));
            }
            std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>> PrepareAsyncAddFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>>
                (PrepareAsyncAddFriendRaw(context, request, cq));
            }

            virtual ::grpc::Status DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                             ::wechat::WechatReply *response) = 0;

            std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>> AsyncDelFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>>
                (AsyncDelFriendRaw(context, request, cq));
            }
            std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>> PrepareAsyncDelFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReaderInterface < ::wechat::WechatReply>>
                (PrepareAsyncDelFriendRaw(context, request, cq));
            }

            class async_interface {
            public:
                virtual ~async_interface() {}

                virtual void AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                       ::wechat::WechatReply *response, std::function<void(::grpc::Status)>) = 0;

                virtual void AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                       ::wechat::WechatReply *response, ::grpc::ClientUnaryReactor *reactor) = 0;

                virtual void DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                       ::wechat::WechatReply *response, std::function<void(::grpc::Status)>) = 0;

                virtual void DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                       ::wechat::WechatReply *response, ::grpc::ClientUnaryReactor *reactor) = 0;
            };

            typedef class async_interface experimental_async_interface;

            virtual class async_interface *async() { return nullptr; }

            class async_interface *experimental_async() { return async(); }

        private:
            virtual ::grpc::ClientAsyncResponseReaderInterface<::wechat::WechatReply> *
            AsyncAddFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                              ::grpc::CompletionQueue *cq) = 0;

            virtual ::grpc::ClientAsyncResponseReaderInterface<::wechat::WechatReply> *
            PrepareAsyncAddFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                     ::grpc::CompletionQueue *cq) = 0;

            virtual ::grpc::ClientAsyncResponseReaderInterface<::wechat::WechatReply> *
            AsyncDelFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                              ::grpc::CompletionQueue *cq) = 0;

            virtual ::grpc::ClientAsyncResponseReaderInterface<::wechat::WechatReply> *
            PrepareAsyncDelFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                     ::grpc::CompletionQueue *cq) = 0;
        };

        class Stub final : public StubInterface {
        public:
            Stub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                 const ::grpc::StubOptions &options = ::grpc::StubOptions());

            ::grpc::Status AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                     ::wechat::WechatReply *response) override;

            std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>> AsyncAddFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>>
                (AsyncAddFriendRaw(context, request, cq));
            }
            std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>> PrepareAsyncAddFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>>
                (PrepareAsyncAddFriendRaw(context, request, cq));
            }

            ::grpc::Status DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                     ::wechat::WechatReply *response) override;

            std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>> AsyncDelFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>>
                (AsyncDelFriendRaw(context, request, cq));
            }
            std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>> PrepareAsyncDelFriend(
            ::grpc::ClientContext *context,
            const ::wechat::WechatRequest &request, ::grpc::CompletionQueue
            * cq) {
                return std::unique_ptr<::grpc::ClientAsyncResponseReader < ::wechat::WechatReply>>
                (PrepareAsyncDelFriendRaw(context, request, cq));
            }

            class async final :
                    public StubInterface::async_interface {
            public:
                void AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                               ::wechat::WechatReply *response, std::function<void(::grpc::Status)>) override;

                void AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                               ::wechat::WechatReply *response, ::grpc::ClientUnaryReactor *reactor) override;

                void DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                               ::wechat::WechatReply *response, std::function<void(::grpc::Status)>) override;

                void DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                               ::wechat::WechatReply *response, ::grpc::ClientUnaryReactor *reactor) override;

            private:
                friend class Stub;

                explicit async(Stub *stub) : stub_(stub) {}

                Stub *stub() { return stub_; }

                Stub *stub_;
            };

            class async *async() override { return &async_stub_; }

        private:
            std::shared_ptr<::grpc::ChannelInterface> channel_;

            class async async_stub_{this};

            ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
            AsyncAddFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                              ::grpc::CompletionQueue *cq) override;

            ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
            PrepareAsyncAddFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                     ::grpc::CompletionQueue *cq) override;

            ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
            AsyncDelFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                              ::grpc::CompletionQueue *cq) override;

            ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
            PrepareAsyncDelFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                     ::grpc::CompletionQueue *cq) override;

            const ::grpc::internal::RpcMethod rpcmethod_AddFriend_;
            const ::grpc::internal::RpcMethod rpcmethod_DelFriend_;
        };

        static std::unique_ptr<Stub> NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                                             const ::grpc::StubOptions &options = ::grpc::StubOptions());

        class Service : public ::grpc::Service {
        public:
            Service();

            virtual ~Service();

            virtual ::grpc::Status AddFriend(::grpc::ServerContext *context, const ::wechat::WechatRequest *request,
                                             ::wechat::WechatReply *response);

            virtual ::grpc::Status DelFriend(::grpc::ServerContext *context, const ::wechat::WechatRequest *request,
                                             ::wechat::WechatReply *response);
        };

        template<class BaseClass>
        class WithAsyncMethod_AddFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithAsyncMethod_AddFriend() {
                ::grpc::Service::MarkMethodAsync(0);
            }

            ~WithAsyncMethod_AddFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status AddFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestAddFriend(::grpc::ServerContext *context, ::wechat::WechatRequest *request,
                                  ::grpc::ServerAsyncResponseWriter<::wechat::WechatReply> *response,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithAsyncMethod_DelFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithAsyncMethod_DelFriend() {
                ::grpc::Service::MarkMethodAsync(1);
            }

            ~WithAsyncMethod_DelFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestDelFriend(::grpc::ServerContext *context, ::wechat::WechatRequest *request,
                                  ::grpc::ServerAsyncResponseWriter<::wechat::WechatReply> *response,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
            }
        };

        typedef WithAsyncMethod_AddFriend<WithAsyncMethod_DelFriend<Service> > AsyncService;

        template<class BaseClass>
        class WithCallbackMethod_AddFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithCallbackMethod_AddFriend() {
                ::grpc::Service::MarkMethodCallback(0,
                                                    new ::grpc::internal::CallbackUnaryHandler<::wechat::WechatRequest, ::wechat::WechatReply>(
                                                            [this](
                                                                    ::grpc::CallbackServerContext *context,
                                                                    const ::wechat::WechatRequest *request,
                                                                    ::wechat::WechatReply *response) {
                                                                return this->AddFriend(context, request, response);
                                                            }));
            }

            void SetMessageAllocatorFor_AddFriend(
                    ::grpc::MessageAllocator<::wechat::WechatRequest, ::wechat::WechatReply> *allocator) {
                ::grpc::internal::MethodHandler *const handler = ::grpc::Service::GetHandler(0);
                static_cast<::grpc::internal::CallbackUnaryHandler<::wechat::WechatRequest, ::wechat::WechatReply> *>(handler)
                        ->SetMessageAllocator(allocator);
            }

            ~WithCallbackMethod_AddFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status AddFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerUnaryReactor *AddFriend(
                    ::grpc::CallbackServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                    ::wechat::WechatReply * /*response*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithCallbackMethod_DelFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithCallbackMethod_DelFriend() {
                ::grpc::Service::MarkMethodCallback(1,
                                                    new ::grpc::internal::CallbackUnaryHandler<::wechat::WechatRequest, ::wechat::WechatReply>(
                                                            [this](
                                                                    ::grpc::CallbackServerContext *context,
                                                                    const ::wechat::WechatRequest *request,
                                                                    ::wechat::WechatReply *response) {
                                                                return this->DelFriend(context, request, response);
                                                            }));
            }

            void SetMessageAllocatorFor_DelFriend(
                    ::grpc::MessageAllocator<::wechat::WechatRequest, ::wechat::WechatReply> *allocator) {
                ::grpc::internal::MethodHandler *const handler = ::grpc::Service::GetHandler(1);
                static_cast<::grpc::internal::CallbackUnaryHandler<::wechat::WechatRequest, ::wechat::WechatReply> *>(handler)
                        ->SetMessageAllocator(allocator);
            }

            ~WithCallbackMethod_DelFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerUnaryReactor *DelFriend(
                    ::grpc::CallbackServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                    ::wechat::WechatReply * /*response*/) { return nullptr; }
        };

        typedef WithCallbackMethod_AddFriend<WithCallbackMethod_DelFriend<Service> > CallbackService;
        typedef CallbackService ExperimentalCallbackService;

        template<class BaseClass>
        class WithGenericMethod_AddFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithGenericMethod_AddFriend() {
                ::grpc::Service::MarkMethodGeneric(0);
            }

            ~WithGenericMethod_AddFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status AddFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }
        };

        template<class BaseClass>
        class WithGenericMethod_DelFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithGenericMethod_DelFriend() {
                ::grpc::Service::MarkMethodGeneric(1);
            }

            ~WithGenericMethod_DelFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }
        };

        template<class BaseClass>
        class WithRawMethod_AddFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawMethod_AddFriend() {
                ::grpc::Service::MarkMethodRaw(0);
            }

            ~WithRawMethod_AddFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status AddFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestAddFriend(::grpc::ServerContext *context, ::grpc::ByteBuffer *request,
                                  ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer> *response,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithRawMethod_DelFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawMethod_DelFriend() {
                ::grpc::Service::MarkMethodRaw(1);
            }

            ~WithRawMethod_DelFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            void RequestDelFriend(::grpc::ServerContext *context, ::grpc::ByteBuffer *request,
                                  ::grpc::ServerAsyncResponseWriter<::grpc::ByteBuffer> *response,
                                  ::grpc::CompletionQueue *new_call_cq, ::grpc::ServerCompletionQueue *notification_cq,
                                  void *tag) {
                ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
            }
        };

        template<class BaseClass>
        class WithRawCallbackMethod_AddFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawCallbackMethod_AddFriend() {
                ::grpc::Service::MarkMethodRawCallback(0,
                                                       new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                                                               [this](
                                                                       ::grpc::CallbackServerContext *context,
                                                                       const ::grpc::ByteBuffer *request,
                                                                       ::grpc::ByteBuffer *response) {
                                                                   return this->AddFriend(context, request, response);
                                                               }));
            }

            ~WithRawCallbackMethod_AddFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status AddFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerUnaryReactor *AddFriend(
                    ::grpc::CallbackServerContext * /*context*/, const ::grpc::ByteBuffer * /*request*/,
                    ::grpc::ByteBuffer * /*response*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithRawCallbackMethod_DelFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithRawCallbackMethod_DelFriend() {
                ::grpc::Service::MarkMethodRawCallback(1,
                                                       new ::grpc::internal::CallbackUnaryHandler<::grpc::ByteBuffer, ::grpc::ByteBuffer>(
                                                               [this](
                                                                       ::grpc::CallbackServerContext *context,
                                                                       const ::grpc::ByteBuffer *request,
                                                                       ::grpc::ByteBuffer *response) {
                                                                   return this->DelFriend(context, request, response);
                                                               }));
            }

            ~WithRawCallbackMethod_DelFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable synchronous version of this method
            ::grpc::Status DelFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            virtual ::grpc::ServerUnaryReactor *DelFriend(
                    ::grpc::CallbackServerContext * /*context*/, const ::grpc::ByteBuffer * /*request*/,
                    ::grpc::ByteBuffer * /*response*/) { return nullptr; }
        };

        template<class BaseClass>
        class WithStreamedUnaryMethod_AddFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithStreamedUnaryMethod_AddFriend() {
                ::grpc::Service::MarkMethodStreamed(0,
                                                    new ::grpc::internal::StreamedUnaryHandler<
                                                            ::wechat::WechatRequest, ::wechat::WechatReply>(
                                                            [this](::grpc::ServerContext *context,
                                                                   ::grpc::ServerUnaryStreamer<
                                                                           ::wechat::WechatRequest, ::wechat::WechatReply> *streamer) {
                                                                return this->StreamedAddFriend(context,
                                                                                               streamer);
                                                            }));
            }

            ~WithStreamedUnaryMethod_AddFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable regular version of this method
            ::grpc::Status AddFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            // replace default version of method with streamed unary
            virtual ::grpc::Status StreamedAddFriend(::grpc::ServerContext *context,
                                                     ::grpc::ServerUnaryStreamer<::wechat::WechatRequest, ::wechat::WechatReply> *server_unary_streamer) = 0;
        };

        template<class BaseClass>
        class WithStreamedUnaryMethod_DelFriend : public BaseClass {
        private:
            void BaseClassMustBeDerivedFromService(const Service * /*service*/) {}

        public:
            WithStreamedUnaryMethod_DelFriend() {
                ::grpc::Service::MarkMethodStreamed(1,
                                                    new ::grpc::internal::StreamedUnaryHandler<
                                                            ::wechat::WechatRequest, ::wechat::WechatReply>(
                                                            [this](::grpc::ServerContext *context,
                                                                   ::grpc::ServerUnaryStreamer<
                                                                           ::wechat::WechatRequest, ::wechat::WechatReply> *streamer) {
                                                                return this->StreamedDelFriend(context,
                                                                                               streamer);
                                                            }));
            }

            ~WithStreamedUnaryMethod_DelFriend() override {
                BaseClassMustBeDerivedFromService(this);
            }

            // disable regular version of this method
            ::grpc::Status DelFriend(::grpc::ServerContext * /*context*/, const ::wechat::WechatRequest * /*request*/,
                                     ::wechat::WechatReply * /*response*/) override {
                abort();
                return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
            }

            // replace default version of method with streamed unary
            virtual ::grpc::Status StreamedDelFriend(::grpc::ServerContext *context,
                                                     ::grpc::ServerUnaryStreamer<::wechat::WechatRequest, ::wechat::WechatReply> *server_unary_streamer) = 0;
        };

        typedef WithStreamedUnaryMethod_AddFriend<WithStreamedUnaryMethod_DelFriend<Service> > StreamedUnaryService;
        typedef Service SplitStreamedService;
        typedef WithStreamedUnaryMethod_AddFriend<WithStreamedUnaryMethod_DelFriend<Service> > StreamedService;
    };

}  // namespace wechat


#endif  // GRPC_wechat_2eproto__INCLUDED
