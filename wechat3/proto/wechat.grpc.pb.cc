// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wechat.proto

#include "wechat.pb.h"
#include "wechat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

namespace wechat {

    static const char *WechatService_method_names[] = {
            "/wechat.WechatService/AddFriend",
            "/wechat.WechatService/DelFriend",
    };

    std::unique_ptr<WechatService::Stub>
    WechatService::NewStub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                           const ::grpc::StubOptions &options) {
        (void) options;
        std::unique_ptr<WechatService::Stub> stub(new WechatService::Stub(channel, options));
        return stub;
    }

    WechatService::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface> &channel,
                              const ::grpc::StubOptions &options)
            : channel_(channel), rpcmethod_AddFriend_(WechatService_method_names[0], options.suffix_for_stats(),
                                                      ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
              rpcmethod_DelFriend_(WechatService_method_names[1], options.suffix_for_stats(),
                                   ::grpc::internal::RpcMethod::NORMAL_RPC, channel) {}

    ::grpc::Status
    WechatService::Stub::AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                   ::wechat::WechatReply *response) {
        return ::grpc::internal::BlockingUnaryCall<::wechat::WechatRequest, ::wechat::WechatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                channel_.get(), rpcmethod_AddFriend_, context, request, response);
    }

    void WechatService::Stub::async::AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                               ::wechat::WechatReply *response, std::function<void(::grpc::Status)> f) {
        ::grpc::internal::CallbackUnaryCall<::wechat::WechatRequest, ::wechat::WechatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                stub_->channel_.get(), stub_->rpcmethod_AddFriend_, context, request, response, std::move(f));
    }

    void WechatService::Stub::async::AddFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                               ::wechat::WechatReply *response, ::grpc::ClientUnaryReactor *reactor) {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                stub_->channel_.get(), stub_->rpcmethod_AddFriend_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
    WechatService::Stub::PrepareAsyncAddFriendRaw(::grpc::ClientContext *context,
                                                  const ::wechat::WechatRequest &request, ::grpc::CompletionQueue *cq) {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::wechat::WechatReply, ::wechat::WechatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                channel_.get(), cq, rpcmethod_AddFriend_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
    WechatService::Stub::AsyncAddFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                           ::grpc::CompletionQueue *cq) {
        auto *result =
                this->PrepareAsyncAddFriendRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status
    WechatService::Stub::DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                   ::wechat::WechatReply *response) {
        return ::grpc::internal::BlockingUnaryCall<::wechat::WechatRequest, ::wechat::WechatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                channel_.get(), rpcmethod_DelFriend_, context, request, response);
    }

    void WechatService::Stub::async::DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                               ::wechat::WechatReply *response, std::function<void(::grpc::Status)> f) {
        ::grpc::internal::CallbackUnaryCall<::wechat::WechatRequest, ::wechat::WechatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                stub_->channel_.get(), stub_->rpcmethod_DelFriend_, context, request, response, std::move(f));
    }

    void WechatService::Stub::async::DelFriend(::grpc::ClientContext *context, const ::wechat::WechatRequest *request,
                                               ::wechat::WechatReply *response, ::grpc::ClientUnaryReactor *reactor) {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                stub_->channel_.get(), stub_->rpcmethod_DelFriend_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
    WechatService::Stub::PrepareAsyncDelFriendRaw(::grpc::ClientContext *context,
                                                  const ::wechat::WechatRequest &request, ::grpc::CompletionQueue *cq) {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::wechat::WechatReply, ::wechat::WechatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                channel_.get(), cq, rpcmethod_DelFriend_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::wechat::WechatReply> *
    WechatService::Stub::AsyncDelFriendRaw(::grpc::ClientContext *context, const ::wechat::WechatRequest &request,
                                           ::grpc::CompletionQueue *cq) {
        auto *result =
                this->PrepareAsyncDelFriendRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    WechatService::Service::Service() {
        AddMethod(new ::grpc::internal::RpcServiceMethod(
                WechatService_method_names[0],
                ::grpc::internal::RpcMethod::NORMAL_RPC,
                new ::grpc::internal::RpcMethodHandler<WechatService::Service, ::wechat::WechatRequest, ::wechat::WechatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                        [](WechatService::Service *service,
                           ::grpc::ServerContext *ctx,
                           const ::wechat::WechatRequest *req,
                           ::wechat::WechatReply *resp) {
                            return service->AddFriend(ctx, req, resp);
                        }, this)));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
                WechatService_method_names[1],
                ::grpc::internal::RpcMethod::NORMAL_RPC,
                new ::grpc::internal::RpcMethodHandler<WechatService::Service, ::wechat::WechatRequest, ::wechat::WechatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                        [](WechatService::Service *service,
                           ::grpc::ServerContext *ctx,
                           const ::wechat::WechatRequest *req,
                           ::wechat::WechatReply *resp) {
                            return service->DelFriend(ctx, req, resp);
                        }, this)));
    }

    WechatService::Service::~Service() {
    }

    ::grpc::Status
    WechatService::Service::AddFriend(::grpc::ServerContext *context, const ::wechat::WechatRequest *request,
                                      ::wechat::WechatReply *response) {
        (void) context;
        (void) request;
        (void) response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status
    WechatService::Service::DelFriend(::grpc::ServerContext *context, const ::wechat::WechatRequest *request,
                                      ::wechat::WechatReply *response) {
        (void) context;
        (void) request;
        (void) response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }


}  // namespace wechat

